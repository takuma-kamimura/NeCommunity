<!-- app/views/maps/search.html.erb -->
<h1>サーチ</h1>
<%= form_with(url: search_maps_path, method: :get, remote: true, html: { onsubmit: "codeAddress(); return false;" }) do |form| %>
 <%= form.label :location, "検索する場所:" %>
  <%= form.text_field :location, placeholder: '市・地名を入力' %>
  <%= form.submit "検索" %>
<% end %>

<h2>gmap</h2>

<div id='map'></div>

<style>
  #map {
    height: 600px;
    width: 600px;
  }
</style>

<script>

function codeAddress() {
    // フォームデータの取得と非同期リクエストの送信
    var locationValue = document.getElementById('location').value;
    fetch('<%= search_maps_path %>?location=' + encodeURIComponent(locationValue), { headers: { 'Accept': 'application/json' } })
      .then(response => response.json())
      .then(data => {
        // 受け取ったデータを使用して地図を更新
        updateMap(data.results);
      });
  }
  // マーカーをクリアする関数
function clearMarkers() {
    markers.forEach(function(marker) {
        marker.setMap(null);
    });
    // マーカーの配列をクリア
    markers = [];
}
  // 地図の更新関数
function updateMap(data) {

    // 既存のマーカーをクリア
    clearMarkers();

var openinfoWindow = null;

    // dataが正しい構造であるか確認
    if (data && Array.isArray(data.results)) {
        const locations = data.results;
        
        // 検索地点の中心座標を求める処理
       let lat_average = 0;
       let lng_average = 0;
       // lat、lng座標の総和を取得
        for (let i = 0; i < locations.length; i++) {
          lat_average += locations[i].geometry.location.lat;
          lng_average += locations[i].geometry.location.lng;
         }
        // 平均値の取得
        lat_average = lat_average/locations.length
        lng_average = lng_average/locations.length
        // 地図の中心とズームレベルの設定
        map.setCenter({lat:lat_average, lng:lng_average});
        map.setZoom(11);

        // 新しいマーカーを追加
        locations.forEach(function(location) {
          console.log(location);
          const photos = location.photos;
            const name = location.name;
            const address = location.formatted_address;
            const latitude = location.geometry.location.lat;
            const longitude = location.geometry.location.lng;
            var marker = new google.maps.Marker({
                map: map,
                position: { lat: latitude, lng: longitude },
                title: name,  // ピンに表示されるタイトル
            });

        // Infowindowのコンテンツを構築
    var contentHtml = '<strong>' + name + '</strong><br>' + address;

        // 写真が存在する場合、最初の写真の URL を取得して表示
    if (photos && photos.length > 0) {
        const photoReference = photos[0].photo_reference;
        const photoUrl = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photoReference}&key=<%= ENV['PLACES_API_KEY'] %>`;
        // contentHTMLに写真情報を付け足す処理
        contentHtml += '<br><img src="' + photoUrl + '" alt="Photo" width="200">';
    }

       // InfoWindowを作成
       var infoWindow = new google.maps.InfoWindow({
            content: contentHtml,
        });

        // マーカーをクリックしたときにInfoWindowを表示
        marker.addListener('click', function() {

          if(openinfoWindow){
            openinfoWindow.close();
          }

            infoWindow.open(map, marker);

            openinfoWindow = infoWindow;
        });
            // 新しいマーカーを保存
            markers.push(marker);
        });
    } else {
        console.error('無効なlocationsデータ:', data);
    }
}
   // 初期化
// mapの初期表示
let map
// ここから追加 
let geocoder

let markers = [];  // markers 配列の初期化を追加

function initMap(){
  geocoder = new google.maps.Geocoder()

  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat:35.680959106959, lng:139.76730676352},
    zoom: 8,
  });

// Object.values(locations).forEach(function(location) {
//         const name = location.name;
//         const address = location.formatted_address;
//         const latitude = location.geometry.location.lat;
//         const longitude = location.geometry.location.lng;
//         var marker = new google.maps.Marker({
//             map: map,
//             position: { lat: latitude, lng: longitude },
//             title: name,  // ピンに表示されるタイトル
//         });

//         // 新しいマーカーを保存
//         markers.push(marker);
//     });
}  

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['YOUR_API_KEY'] %>&callback=initMap" async defer></script>
